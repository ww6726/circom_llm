const chai = require("chai");
const path = require("path");
const F1Field = require("ffjavascript").F1Field;
const Scalar = require("ffjavascript").Scalar;
exports.p = Scalar.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617");
const Fr = new F1Field(exports.p);
const {floatToQ,matrixMultiplication} = require('../build_circuit/basic_components/util');
const {matmul} = require("../build_circuit/basic_components/matmul");
const {I_layerNorm2D} = require("../build_witness_for_circuit/basic_components/layerNorm");

function truncateMatrix(matrix, fracBits) {
    const rows = matrix.length;
    const columns = matrix[0].length;
  
    for (let i = 0; i < rows; i++) {
      for (let j = 0; j < columns; j++) {
        matrix[i][j] = Math.trunc(matrix[i][j] / Math.pow(2,fracBits));
      }
    }
    return matrix;
  }
function matmulTruncate(matrixA, matrixB,fracBits) {
    const rowsA = matrixA.length;
    const columnsA = matrixA[0].length;
    const columnsB = matrixB[0].length;
  
    if (columnsA !== matrixB.length) {
      throw new Error("Invalid matrix dimensions. Columns of matrixA must match rows of matrixB.");
    }
  
    let result = new Array(rowsA);
    for (let i = 0; i < rowsA; i++) {
      result[i] = new Array(columnsB);
      for (let j = 0; j < columnsB; j++) {
        result[i][j] = 0;
        for (let k = 0; k < columnsA; k++) {
          result[i][j] += matrixA[i][k] * matrixB[k][j];
        }
      }
    }
  
  
    result = truncateMatrix(result,fracBits)
    return result;
  }
describe("Matrix multiplication test", function () {
    this.timeout(100000000);

    it("should a n by m matrix with a m by p matrix", async () => {
        
        const fracBits = 8;
        let a_ = [
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ],
          [
            -429, -402, -374, -346, -318, -291,
            -263, -235, -207, -180, -152, -124,
             -97,  -69,  -41,  -13,   13,   41,
              69,   97,  124,  152,  180,  207,
             235,  263,  291,  318,  346,  374,
             402,  429
          ]];
        let b_ = [
          [ 0, 256, 512, 768 ],
          [ 256, 512, 768, 1024 ],
          [ 512, 768, 1024, 1280 ],
          [ 768, 1024, 1280, 1536 ],
          [ 1024, 1280, 1536, 1792 ],
          [ 1280, 1536, 1792, 2048 ],
          [ 1536, 1792, 2048, 2304 ],
          [ 1792, 2048, 2304, 2560 ],
          [ 2048, 2304, 2560, 2816 ],
          [ 2304, 2560, 2816, 3072 ],
          [ 2560, 2816, 3072, 3328 ],
          [ 2816, 3072, 3328, 3584 ],
          [ 3072, 3328, 3584, 3840 ],
          [ 3328, 3584, 3840, 4096 ],
          [ 3584, 3840, 4096, 4352 ],
          [ 3840, 4096, 4352, 4608 ],
          [ 4096, 4352, 4608, 4864 ],
          [ 4352, 4608, 4864, 5120 ],
          [ 4608, 4864, 5120, 5376 ],
          [ 4864, 5120, 5376, 5632 ],
          [ 5120, 5376, 5632, 5888 ],
          [ 5376, 5632, 5888, 6144 ],
          [ 5632, 5888, 6144, 6400 ],
          [ 5888, 6144, 6400, 6656 ],
          [ 6144, 6400, 6656, 6912 ],
          [ 6400, 6656, 6912, 7168 ],
          [ 6656, 6912, 7168, 7424 ],
          [ 6912, 7168, 7424, 7680 ],
          [ 7168, 7424, 7680, 7936 ],
          [ 7424, 7680, 7936, 8192 ],
          [ 7680, 7936, 8192, 8448 ],
          [ 7936, 8192, 8448, 8704 ]
        ];

        let a = [];
        let b = [];
        
        const m = 32;
        const n = 32;
        const p = 96;
        
        for(let i = 0;i<m;i++){
            a[i] = [];
            a_[i] = [];
            for(let j = 0;j <n;j++){
                const number = i+j;
                a[i][j] = floatToQ(4,fracBits,number);
                a_[i][j] = number;

            }
        }
        for(let i = 0;i<n;i++){
            b[i] = [];
            b_[i] = [];
            for(let j = 0;j <p;j++){
                const number = i+j;
                b[i][j] = floatToQ(4,fracBits,number);
                b_[i][j] = number;
            }
        }
        console.log("==================== Actual ==========================");
        a = I_layerNorm2D(a,fracBits);
        const out_ = matmulTruncate(a,b,fracBits);
        console.log(out_);

 

        console.log("==================== Circuit ==========================");
        const out = await matmul(a,b,fracBits);

        for (let i = 0; i < m; i++) {
            for (let j = 0; j < p; j++) {
                out[i][j] = parseFloat(Fr.toString(out[i][j])) ;
            }
        }
        console.log(out);

    });
});